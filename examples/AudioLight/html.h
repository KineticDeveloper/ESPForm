#include <Arduino.h>

////////////////////////////////////////////////////////////////////////

//index.htnl

////////////////////////////////////////////////////////////////////////

/*

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <title>Audio Light</title>
    <meta name="viewport"
        content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0, shrink-to-fit=yes" />
   
    
</head>

<body>
    <div id="my-peak-meter" style="width: 20em; height: 5em; margin: 1em 0;">
    </div>
    <audio crossOrigin="anonymous" id="my-audio" preload="metadata" controls="controls">
        <source src="http://cast5.magicstreams.gr:8010/stream" type="audio/mpeg">
    </audio>

    <script src="main.js"></script>
    
    <script>

        window.addEventListener('load', function () {

            var myMeterElement = document.getElementById('my-peak-meter');
            var myAudio = document.getElementById('my-audio');

            var audioCtx = new window.AudioContext();
            var sourceNode = audioCtx.createMediaElementSource(myAudio);
            sourceNode.connect(audioCtx.destination);
            var meterNode = createMeterNode(sourceNode, audioCtx);

            createMeter(myMeterElement, meterNode, {});
            myAudio.addEventListener('play', function () {
                audioCtx.resume();
            });
        });

    </script>
</body>

</html>

*/

////////////////////////////////////////////////////////////////////////

//main.js

////////////////////////////////////////////////////////////////////////

/*



const defaultConfig = {
    borderSize: 1,
    fontSize: 9,
    backgroundColor: '#fff',
    tickColor: '#ddd',
    labelColor: '#ddd',
    gradient: ['red 1%', '#ff0 16%', 'lime 45%', '#080 100%'],
    dbRange: 48,
    dbTickSize: 6,
    maskTransition: '0.1s',
    audioMeterStandard: 'true-peak', // Could be "true-peak" (ITU-R BS.1770) or "peak-sample"
    refreshEveryApproxMs: 20,
    peakHoldDuration: null,
};

function createMeterNode(sourceNode, audioCtx, options = {}) {
    // eslint-disable-next-line prefer-object-spread
    const config = Object.assign({}, defaultConfig, options);
    const { refreshEveryApproxMs } = config;
    const { channelCount, sampleRate } = sourceNode;

    // Calculate refresh interval
    const resfreshIntervalSamples = (refreshEveryApproxMs / 1000) * sampleRate * channelCount;
    const bufferSize = findAudioProcBufferSize(resfreshIntervalSamples);
    const meterNode = audioCtx.createScriptProcessor(bufferSize, channelCount, channelCount);
    sourceNode.connect(meterNode).connect(audioCtx.destination);
    return meterNode;
}

function updateMeter(audioProcessingEvent, config, meterData) {
    const { inputBuffer } = audioProcessingEvent;
    const { audioMeterStandard, peakHoldDuration } = config;
    let channelMaxes = [];

    // Calculate peak levels
    if (audioMeterStandard === 'true-peak') {
        // This follows ITU-R BS.1770 (True Peak meter)
        channelMaxes = calculateTPValues(inputBuffer, meterData);
    } else {
        // Just get the peak level
        channelMaxes = calculateMaxValues(inputBuffer);
    }

    // Update peak & text values
    for (let i = 0; i < channelMaxes.length; i += 1) {
        meterData.tempPeaks[i] = channelMaxes[i];
        if (channelMaxes[i] > meterData.heldPeaks[i]) {
            meterData.heldPeaks[i] = channelMaxes[i];
            if (peakHoldDuration) {
                if (meterData.peakHoldTimeouts[i]) {
                    clearTimeout(meterData.peakHoldTimeouts[i]);
                }
                meterData.peakHoldTimeouts[i] = setTimeout(() => {
                    meterData.heldPeaks[i] = meterData.tempPeaks[i];
                }, peakHoldDuration);
            }
        }
    }
}

function createMeter(domElement, meterNode, options = {}) {
    // eslint-disable-next-line prefer-object-spread
    const config = Object.assign({}, defaultConfig, options);

    const meterElement = createContainerDiv(domElement, config);
    const meterData = createTicks(meterElement, config);

    const { channelCount } = meterNode;

    meterData.tempPeaks = new Array(channelCount).fill(0.0);
    meterData.heldPeaks = new Array(channelCount).fill(0.0);
    meterData.peakHoldTimeouts = new Array(channelCount).fill(null);
    meterData.channelCount = channelCount;

    meterData.channelBars = createBars(meterElement, config, meterData);
    meterData.channelMasks = createMasks(meterElement, config, meterData);
    meterData.textLabels = createPeakLabels(meterElement, config, meterData);

    if (config.audioMeterStandard === 'true-peak') {
        meterData.lpfCoefficients = [];
        meterData.lpfBuffer = [];
        meterData.upsampleFactor = 4;
        meterData.lastChannelTP = [];
        meterData.decayFactor = 0.99999;
    }

    meterNode.onaudioprocess = (evt) => updateMeter(evt, config, meterData);
    meterElement.addEventListener('click', () => {
        meterData.heldPeaks.fill(0.0);
    }, false);
    paintMeter(config, meterData);
}



function audioClipPath(db, dbRange, vertical) {
    let clipPercent = Math.floor((db * -100) / dbRange);
    if (clipPercent > 100) {
        clipPercent = 100;
    }
    if (clipPercent < 0) {
        clipPercent = 0;
    }
    if (vertical) {
        return `inset(${clipPercent}% 0 0)`;
    }
    return `inset(0 ${clipPercent}% 0 0)`;
}

function createContainerDiv(parent, config) {
    const { clientWidth, clientHeight } = parent;
    const { backgroundColor } = config;
    const meterElement = document.createElement('div');
    meterElement.style.position = 'relative';
    meterElement.style.width = `${clientWidth}px`;
    meterElement.style.height = `${clientHeight}px`;
    meterElement.style.backgroundColor = backgroundColor;
    parent.appendChild(meterElement);
    return meterElement;
}

function createTicks(parent, config) {
    const { clientWidth, clientHeight } = parent;
    const {
        dbRange, dbTickSize, fontSize, borderSize, tickColor,
    } = config;
    const numTicks = Math.floor(dbRange / dbTickSize);
    const tickDivs = Array.from(Array(numTicks).keys()).map((i) => {
        const tickDiv = document.createElement('div');
        parent.appendChild(tickDiv);
        tickDiv.style.position = 'absolute';
        tickDiv.style.color = tickColor;
        tickDiv.style.textAlign = 'right';
        tickDiv.style.fontSize = `${fontSize}px`;
        tickDiv.textContent = `-${dbTickSize * i}`;
        return tickDiv;
    });
    const vertical = clientHeight > clientWidth;
    if (vertical) {
        const tickWidth = fontSize * 2.0;
        const meterTop = fontSize * 1.5 + borderSize;
        const dbTickTop = fontSize + borderSize;
        const meterHeight = clientHeight - meterTop - borderSize;
        const meterWidth = clientWidth - tickWidth - borderSize;
        const tickSpacing = meterHeight / numTicks;
        tickDivs.forEach((tickDiv, i) => {
            tickDiv.style.width = `${tickWidth}px`;
            tickDiv.style.top = `${(tickSpacing * i) + dbTickTop}px`;
        });
        return {
            vertical, tickWidth, meterHeight, meterWidth, meterTop,
        };
    }
    const tickWidth = fontSize * 1.5;
    const meterHeight = (clientHeight - tickWidth) - (borderSize * 2);
    const meterTop = fontSize * 3;
    const meterWidth = (clientWidth - meterTop) - (borderSize * 2);
    const tickSpacing = meterWidth / numTicks;
    tickDivs.forEach((tickDiv, i) => {
        tickDiv.style.width = `${meterTop}px`;
        tickDiv.style.bottom = `${borderSize}px`;
        tickDiv.style.right = `${(tickSpacing * i) + meterTop}px`;
    });
    return {
        vertical, tickWidth, meterHeight, meterWidth, meterTop,
    };
}

function createBars(parent, config, meterData) {
    const { gradient, borderSize } = config;
    const {
        channelCount, vertical, meterWidth, meterHeight, meterTop, tickWidth,
    } = meterData;
    // const initialClipPath = audioClipPath(dbRange, dbRange, vertical);
    const barDivs = Array.from(Array(channelCount).keys()).map(() => {
        const barDiv = document.createElement('div');
        parent.appendChild(barDiv);
        barDiv.style.position = 'absolute';
        // barDiv.style.clipPath = initialClipPath;
        // barDiv.style.WebkitClipPath = initialClipPath;
        return barDiv;
    });
    if (vertical) {
        const barWidth = (meterWidth / channelCount) - borderSize;
        const gradientStyle = `linear-gradient(to bottom, ${gradient.join(', ')})`;
        barDivs.forEach((barDiv, i) => {
            barDiv.style.height = `${meterHeight}px`;
            barDiv.style.width = `${barWidth}px`;
            barDiv.style.backgroundImage = gradientStyle;
            barDiv.style.top = `${meterTop}px`;
            barDiv.style.left = `${((barWidth + borderSize) * i) + tickWidth + borderSize}px`;
        });
    } else {
        const barWidth = (meterHeight / channelCount) - borderSize;
        const gradientStyle = `linear-gradient(to left, ${gradient.join(', ')})`;
        barDivs.forEach((barDiv, i) => {
            barDiv.style.height = `${barWidth}px`;
            barDiv.style.width = `${meterWidth}px`;
            barDiv.style.backgroundImage = gradientStyle;
            barDiv.style.top = `${((barWidth + borderSize) * i) + borderSize}px`;
            barDiv.style.right = `${meterTop}px`;
        });
    }
    return barDivs;
}

function createMasks(parent, config, meterData) {
    const { backgroundColor, borderSize, maskTransition } = config;
    const {
        channelCount, vertical, meterWidth, meterHeight, meterTop, tickWidth,
    } = meterData;
    const barDivs = Array.from(Array(channelCount).keys()).map(() => {
        const barDiv = document.createElement('div');
        parent.appendChild(barDiv);
        barDiv.style.position = 'absolute';
        barDiv.style.backgroundColor = backgroundColor;
        return barDiv;
    });
    if (vertical) {
        const barWidth = (meterWidth / channelCount) - borderSize;
        barDivs.forEach((barDiv, i) => {
            barDiv.style.height = `${meterHeight}px`;
            barDiv.style.width = `${barWidth}px`;
            barDiv.style.top = `${meterTop}px`;
            barDiv.style.left = `${((barWidth + borderSize) * i) + tickWidth + borderSize}px`;
            barDiv.style.transition = `height ${maskTransition}`;
        });
    } else {
        const barWidth = (meterHeight / channelCount) - borderSize;
        barDivs.forEach((barDiv, i) => {
            barDiv.style.height = `${barWidth}px`;
            barDiv.style.width = `${meterWidth}px`;
            barDiv.style.top = `${((barWidth + borderSize) * i) + borderSize}px`;
            barDiv.style.right = `${meterTop}px`;
            barDiv.style.transition = `width ${maskTransition}`;
        });
    }
    return barDivs;
}

function createPeakLabels(parent, config, meterData) {
    const { borderSize, labelColor, fontSize } = config;
    const {
        channelCount, vertical, meterWidth, meterHeight, tickWidth,
    } = meterData;
    const labelDivs = Array.from(Array(channelCount).keys()).map(() => {
        const label = document.createElement('div');
        parent.appendChild(label);
        label.style.textAlign = 'center';
        label.style.color = labelColor;
        label.style.fontSize = `${fontSize}px`;
        label.style.position = 'absolute';
        label.textContent = '-∞';
        return label;
    });
    if (vertical) {
        const barWidth = meterWidth / channelCount;
        labelDivs.forEach((label, i) => {
            label.style.width = `${barWidth}px`;
            label.style.top = `${borderSize}px`;
            label.style.left = `${(barWidth * i) + tickWidth}px`;
        });
    } else {
        const barHeight = meterHeight / channelCount;
        labelDivs.forEach((label, i) => {
            label.style.width = `${fontSize * 2}px`;
            label.style.right = `${borderSize}px`;
            label.style.top = `${(barHeight * i) + tickWidth}px`;
        });
    }
    return labelDivs;
}

function maskSize(floatVal, dbRange, meterDimension) {
    const d = dbRange * -1;
    const numPx = Math.floor((dbFromFloat(floatVal) * meterDimension) / d);
    if (numPx > meterDimension) {
        return meterDimension;
    }
    if (numPx < 0) {
        return 0;
    }
    return numPx;
}

function paintMeter(config, meterData) {
    const { dbRange } = config;
    const {
        tempPeaks, heldPeaks, channelMasks, textLabels, meterHeight, meterWidth, vertical,
    } = meterData;
    // hopefully some day transition will work for clip path.
    // until then we use a mask div.
    // channelBars.forEach((barDiv, i) => {
    //   const tempPeak = dbFromFloat(tempPeaks[i]);
    //   const clipPath = audioClipPath(tempPeak, dbRange, vertical);
    //   barDiv.style.clipPath = clipPath;
    //   barDiv.style.WebkitClipPath = clipPath;
    // });

     sendMessage("event", "audio1", tempPeaks[0] * 1024, 0);
    //sendMessage("event", "audio2", tempPeaks[1] * 1024, 0);

    //console.log(tempPeaks[0] *100);
    const meterDimension = vertical ? meterHeight : meterWidth;
    channelMasks.forEach((maskDiv, i) => {
        const channelSize = maskSize(tempPeaks[i], dbRange, meterDimension);
        if (vertical) {
            maskDiv.style.height = `${channelSize}px`;
        } else {
            maskDiv.style.width = `${channelSize}px`;
        }
    });
    textLabels.forEach((textLabel, i) => {
        if (heldPeaks[i] === 0.0) {
            textLabel.textContent = '-∞';
        } else {
            const heldPeak = dbFromFloat(heldPeaks[i]);
            textLabel.textContent = heldPeak.toFixed(1);
        }
    });
    window.requestAnimationFrame(() => paintMeter(config, meterData));
}

function calculateMaxValues(inputBuffer) {
    const channelMaxes = [];
    const { numberOfChannels } = inputBuffer;

    for (let c = 0; c < numberOfChannels; c += 1) {
        channelMaxes[c] = 0.0;
        const channelData = inputBuffer.getChannelData(c);
        for (let s = 0; s < channelData.length; s += 1) {
            if (Math.abs(channelData[s]) > channelMaxes[c]) {
                channelMaxes[c] = Math.abs(channelData[s]);
            }
        }
    }
    return channelMaxes;
}



function findAudioProcBufferSize(numSamplesIn) {
    return [256, 512, 1024, 2048, 4096, 8192, 16384].reduce((a, b) => (
        Math.abs(b - numSamplesIn) < Math.abs(a - numSamplesIn) ? b : a));
}

function calculateLPFCoefficients(numCoefficients, upsampleFactor) {
    const retCoefs = [];
    const fcRel = 1.0 / (4.0 * upsampleFactor);
    const coefsLim = Math.floor((numCoefficients - 1) / 2);
    for (let n = -coefsLim; n <= coefsLim; n += 1) {
        const wn = 0.54 + 0.46 * Math.cos((2.0 * Math.PI * n) / numCoefficients);
        let hn = 0.0;
        if (n === 0) {
            hn = 2.0 * fcRel;
        } else {
            hn = Math.sin(2.0 * Math.PI * fcRel * n) / (Math.PI * n);
        }
        // Adapt windows & upsampler factor
        hn = (wn * hn) * upsampleFactor;
        retCoefs.push(hn);
    }
    return retCoefs;
}

function filterSample(sample, meterData) {
    const { lpfBuffer, lpfCoefficients, upsampleFactor } = meterData;
    const ret = [];
    lpfBuffer.push(sample);
    if (lpfBuffer.length >= lpfCoefficients.length) {
        lpfBuffer.shift();
    }
    for (let nA = 0; nA < upsampleFactor; nA += 1) {
        let nT = 0;
        let retVal = 0;
        for (let nc = nA; nc < lpfCoefficients.length; nc += upsampleFactor) {
            retVal += (lpfCoefficients[nc] * lpfBuffer[lpfBuffer.length - 1 - nT]);
            nT += 1;
        }
        ret.push(retVal);
    }
    return ret;
}

function audioOverSampleAndFilter(channelData, inputFs, meterData) {
    let res = [];
    // Initialize filter coefficients and buffer
    if (meterData.lpfCoefficients.length <= 0) {
        log(`Initialing filter components for ITU-R BS.1770, fs: ${inputFs}`);
        if (inputFs >= 96000) {
            meterData.upsampleFactor = 2;
        }
        meterData.lpfCoefficients = calculateLPFCoefficients(33, meterData.upsampleFactor);
        meterData.lpfBuffer = new Array(meterData.lpfCoefficients.length).fill(0.0);
        log(`Initialized lpfCoefficients lpfCoefficients=[${meterData.lpfCoefficients.join(',')}], and lpfBuffer: [${meterData.lpfBuffer.join(',')}]`);
    }
    for (let ni = 0; ni < channelData.length; ni += 1) {
        // 1 input sample -> generated upsampleFactor samples
        const samplesOut = filterSample(channelData[ni], meterData);
        res = res.concat(samplesOut);
    }
    return res;
}

function calculateTPValues(inputBuffer, meterData) {
    const { lastChannelTP, channelCount } = meterData;
    const { sampleRate } = inputBuffer;
    // Ini TP values
    if (lastChannelTP.length <= 0) {
        log(`Initialing TP values for ${channelCount}channels`);
        meterData.lastChannelTP = new Array(channelCount).fill(0.0);
        // Decay time ms = 1700 and -20Db
        const attFactor = Math.pow(10.0, -20 / 10.0);
        const decayTimeS = 1700 / 1000;
        meterData.decayFactor = Math.pow(attFactor, 1.0 / (sampleRate * decayTimeS));
        log(`Initialized with decayFactor ${meterData.decayFactor}`);
    }
    for (let c = 0; c < channelCount; c += 1) {
        const channelData = inputBuffer.getChannelData(c);
        // Process according to ITU-R BS.1770
        const overSampledAndLPF = audioOverSampleAndFilter(channelData, sampleRate, meterData);
        for (let s = 0; s < overSampledAndLPF.length; s += 1) {
            lastChannelTP[c] *= meterData.decayFactor;
            if (Math.abs(overSampledAndLPF[s]) > lastChannelTP[c]) {
                lastChannelTP[c] = Math.abs(overSampledAndLPF[s]);
            }
        }
    }
    return lastChannelTP;
}

const debugMode = false;

function log(...args) {
    if (debugMode) {
        console.log(...args);
    }
}

function getBaseLog(x, y) {
    return Math.log(y) / Math.log(x);
}

function dbFromFloat(floatVal) {
    return getBaseLog(10, floatVal) * 20;
}

function findAudioProcBufferSize(numSamplesIn) {
    return [256, 512, 1024, 2048, 4096, 8192, 16384].reduce((a, b) => (
        Math.abs(b - numSamplesIn) < Math.abs(a - numSamplesIn) ? b : a));
}


*/

//Content of index.html with gzip compression
static const uint8_t index_html_gz[] PROGMEM = {
    0x1F, 0x8B, 0x08, 0x08, 0xA3, 0x78, 0xAC, 0x60, 0x04, 0x00, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E,
    0x68, 0x74, 0x6D, 0x6C, 0x00, 0x85, 0x54, 0xDB, 0x6A, 0xDC, 0x30, 0x10, 0x7D, 0x2F, 0xF4, 0x1F,
    0x54, 0xBD, 0xAC, 0x0B, 0xBE, 0x6C, 0x0A, 0x81, 0xB0, 0xB1, 0x03, 0x69, 0xBA, 0x0F, 0x81, 0xA4,
    0x29, 0xB4, 0x85, 0xF6, 0x51, 0x91, 0x26, 0xB6, 0x1A, 0x4B, 0x72, 0x25, 0x79, 0x37, 0x26, 0xE4,
    0xDF, 0x3B, 0x96, 0xED, 0xBD, 0x43, 0xF5, 0x60, 0x8F, 0x46, 0x9A, 0x73, 0xCE, 0x5C, 0xEC, 0xFC,
    0xC3, 0x97, 0x87, 0x9B, 0x1F, 0xBF, 0xBF, 0x2D, 0x49, 0xE5, 0x55, 0x7D, 0xF5, 0xFE, 0x5D, 0xDE,
    0xBF, 0x49, 0xCD, 0x74, 0x59, 0x50, 0xD0, 0x14, 0x3D, 0xBD, 0x0F, 0x98, 0x40, 0x8B, 0xE0, 0xCA,
    0x15, 0x78, 0x46, 0x78, 0xC5, 0xAC, 0x03, 0x5F, 0xD0, 0xD6, 0x3F, 0x25, 0x17, 0x94, 0x64, 0xBB,
    0xA7, 0x08, 0xE5, 0x9B, 0x04, 0xFE, 0xB6, 0x72, 0x55, 0xD0, 0x5F, 0xC9, 0xCF, 0xEB, 0xE4, 0xC6,
    0xA8, 0x86, 0x79, 0xF9, 0x58, 0x03, 0x25, 0xDC, 0x68, 0x0F, 0x1A, 0x43, 0x6F, 0x97, 0x05, 0x88,
    0x12, 0x62, 0x5E, 0x59, 0xA3, 0xA0, 0x38, 0xDB, 0x41, 0xF1, 0xD2, 0xD7, 0x70, 0x75, 0xDD, 0x0A,
    0x69, 0xC8, 0x9D, 0x2C, 0x2B, 0x9F, 0x67, 0xC1, 0xB5, 0xC7, 0xA2, 0x19, 0x46, 0xD1, 0x95, 0x84,
    0x75, 0x63, 0xAC, 0xA7, 0x78, 0x34, 0xAC, 0x2D, 0xC3, 0x5A, 0x0A, 0x5F, 0x15, 0x02, 0x56, 0x92,
    0x43, 0x12, 0x36, 0x31, 0x91, 0x5A, 0x7A, 0xC9, 0xEA, 0xC4, 0x71, 0x56, 0x23, 0x69, 0x4C, 0x14,
    0x7B, 0x91, 0xAA, 0x55, 0x5B, 0x47, 0xEB, 0xC0, 0x86, 0x1D, 0x7B, 0x44, 0xC7, 0x3C, 0x26, 0xAE,
    0xB2, 0x52, 0x3F, 0x27, 0xDE, 0x24, 0x4F, 0xD2, 0x17, 0x1D, 0xB8, 0x8D, 0x52, 0x7C, 0x84, 0x67,
    0x9E, 0x8D, 0x15, 0x42, 0xF3, 0xD1, 0x88, 0x6E, 0xD2, 0x29, 0xE4, 0x8A, 0x48, 0x51, 0x50, 0xD5,
    0x25, 0x0D, 0xB0, 0xE7, 0x04, 0x75, 0x83, 0xA5, 0xC4, 0xF9, 0x0E, 0x91, 0x07, 0x79, 0x0B, 0xF2,
    0x69, 0x0E, 0xEA, 0x92, 0x54, 0xD0, 0xE7, 0xB9, 0x20, 0xE7, 0xB8, 0x41, 0x4D, 0xB6, 0x94, 0x7A,
    0x41, 0xCE, 0x40, 0x91, 0xF9, 0x25, 0x9D, 0xE0, 0x32, 0xC4, 0x9B, 0x6C, 0x16, 0x8A, 0xC3, 0xAD,
    0x71, 0xEE, 0xC1, 0x4A, 0xBC, 0x5D, 0x50, 0xA6, 0x8D, 0xEE, 0x94, 0x69, 0x1D, 0x9D, 0x48, 0xC3,
    0x25, 0x4A, 0x1A, 0x0B, 0xB5, 0x61, 0xE8, 0xEA, 0xEB, 0x26, 0x98, 0x67, 0x43, 0x17, 0xAC, 0xA9,
    0x5D, 0x41, 0x27, 0x6B, 0x62, 0x09, 0xE8, 0xCE, 0xB4, 0x96, 0x03, 0x71, 0x96, 0x17, 0xB4, 0xEF,
    0xE6, 0x22, 0xCB, 0x38, 0x73, 0xFE, 0x3C, 0x55, 0xAC, 0x94, 0xDC, 0x79, 0x0B, 0x4C, 0xB9, 0xB4,
    0xB4, 0x8B, 0x8B, 0xF9, 0xD9, 0x3C, 0x1B, 0xF6, 0x94, 0xF8, 0xAE, 0xC1, 0xB4, 0x02, 0x69, 0xA6,
    0x1A, 0x28, 0xB7, 0xC2, 0x83, 0x2F, 0xD4, 0x67, 0x80, 0xE7, 0x56, 0x36, 0x7E, 0x80, 0x57, 0x4C,
    0xEA, 0xF4, 0x0F, 0xD2, 0xE7, 0xD9, 0xE0, 0x1E, 0x83, 0xF6, 0xAE, 0x0E, 0xA1, 0xE3, 0x5A, 0x4B,
    0x2D, 0xCC, 0x3A, 0x65, 0x42, 0x2C, 0x57, 0xD8, 0xE7, 0x3B, 0xE9, 0xB0, 0xDD, 0x60, 0xA3, 0x59,
    0x9F, 0xE4, 0x2C, 0x26, 0x4F, 0xAD, 0xE6, 0x5E, 0x1A, 0x4D, 0xA2, 0x8F, 0xE4, 0x75, 0x08, 0xDC,
    0xAE, 0x15, 0xB3, 0x44, 0x75, 0xF7, 0x7D, 0x23, 0x96, 0x35, 0x28, 0x8C, 0x27, 0x05, 0x11, 0x86,
    0xB7, 0xBD, 0x99, 0x96, 0xE0, 0x47, 0xEF, 0xE7, 0xEE, 0x56, 0x44, 0xB3, 0xBD, 0xC6, 0xCD, 0x3E,
    0x5E, 0x9E, 0xC2, 0x0A, 0x63, 0xFA, 0x1F, 0x90, 0x90, 0x7F, 0x88, 0x3F, 0x46, 0x08, 0x67, 0x37,
    0xFE, 0x05, 0x21, 0x34, 0xAC, 0xA7, 0xEC, 0xAE, 0x83, 0xB7, 0x9F, 0xE4, 0x17, 0x1F, 0x9D, 0x22,
    0x1E, 0x5A, 0xF4, 0xD5, 0x08, 0xC0, 0xC0, 0x09, 0x23, 0xE5, 0xD8, 0x09, 0x0F, 0xF7, 0x20, 0x24,
    0x1B, 0x35, 0x7C, 0x0F, 0xF7, 0xA2, 0x51, 0xE7, 0x21, 0xD2, 0x16, 0x25, 0xC5, 0x41, 0xD0, 0xC0,
    0x7D, 0xB4, 0xC1, 0x12, 0xE0, 0xBC, 0xD4, 0xAC, 0x2F, 0xE5, 0x29, 0x01, 0xA1, 0x26, 0x23, 0xFF,
    0x48, 0x3B, 0x79, 0xA2, 0x2D, 0x6C, 0xBC, 0xD1, 0x76, 0x94, 0xFD, 0x6E, 0x54, 0xB4, 0xDF, 0x93,
    0x78, 0x40, 0x1F, 0x00, 0x5E, 0xDF, 0x0E, 0xE9, 0xC7, 0x64, 0x4E, 0x8C, 0x40, 0x53, 0xB3, 0xEE,
    0x78, 0x04, 0xC8, 0xC1, 0xDA, 0xA4, 0x68, 0xC1, 0x61, 0xCF, 0x8E, 0xEA, 0xBB, 0x47, 0xF8, 0x76,
    0x20, 0x7C, 0x67, 0x4E, 0xF3, 0x6C, 0xFC, 0xDA, 0x7B, 0x33, 0xFC, 0x40, 0xFF, 0x01, 0xCB, 0x88,
    0xBF, 0xDC, 0x50, 0x05, 0x00, 0x00};

//Content of main.js with gzip compression
static const uint8_t main_js_gz[] PROGMEM = {
    0x1F, 0x8B, 0x08, 0x08, 0xB2, 0x77, 0xAC, 0x60, 0x04, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x2E, 0x6A,
    0x73, 0x00, 0xDD, 0x1C, 0xDB, 0x6E, 0xE3, 0x44, 0xF4, 0x1D, 0x89, 0x7F, 0x18, 0x2D, 0x0B, 0x75,
    0x8A, 0xE3, 0x26, 0xA5, 0xBB, 0xB0, 0x6D, 0x53, 0x54, 0xBA, 0x54, 0x2C, 0xDA, 0x42, 0x45, 0x0B,
    0x3C, 0x54, 0x95, 0xEA, 0xD8, 0x93, 0xC4, 0xD4, 0xB1, 0x8D, 0xED, 0xF4, 0x42, 0x95, 0x77, 0xBE,
    0x82, 0x8F, 0xE3, 0x4B, 0x38, 0x73, 0xBF, 0xD9, 0x89, 0xBB, 0x14, 0x16, 0x51, 0x04, 0xB1, 0x67,
    0xCE, 0xFD, 0x9C, 0x39, 0x67, 0x66, 0x3C, 0xC3, 0x87, 0x1F, 0x7C, 0xF8, 0x41, 0x94, 0x67, 0x55,
    0x8D, 0x62, 0x3C, 0x09, 0x17, 0x69, 0x7D, 0x94, 0x67, 0x93, 0x64, 0x8A, 0x46, 0xE8, 0xE1, 0xC3,
    0x0F, 0x10, 0xFC, 0x8D, 0xF3, 0x32, 0xC6, 0xE5, 0x59, 0xF2, 0x1B, 0xDE, 0x45, 0x43, 0x9F, 0xB5,
    0x4D, 0xF2, 0xAC, 0x66, 0x2D, 0xAF, 0x78, 0xCB, 0x38, 0x8C, 0xAE, 0xA7, 0x65, 0xBE, 0xC8, 0xE2,
    0xA3, 0x3C, 0xCD, 0xCB, 0x5D, 0xB4, 0xF1, 0xD1, 0x64, 0x32, 0xD9, 0xE0, 0xBD, 0x75, 0x12, 0x5D,
    0xCB, 0xF6, 0x38, 0x8E, 0x45, 0x7B, 0x1A, 0x8E, 0x71, 0xDA, 0xD4, 0x31, 0x2D, 0xC3, 0x38, 0xC1,
    0x59, 0xBD, 0x8B, 0x2E, 0x36, 0x4A, 0x1C, 0xA3, 0xE1, 0xC7, 0x1B, 0x3E, 0x25, 0x39, 0x40, 0xC3,
    0x97, 0xF4, 0x39, 0x4D, 0xE6, 0x18, 0xED, 0xBC, 0x60, 0xED, 0x83, 0x2F, 0xA0, 0x7D, 0x30, 0xF8,
    0x78, 0xE3, 0x92, 0xE3, 0xC7, 0xE3, 0x1F, 0xC2, 0x6C, 0x0A, 0xF2, 0xED, 0x7C, 0x21, 0x5B, 0xCE,
    0x41, 0x08, 0x26, 0xF4, 0x4B, 0xDE, 0x36, 0x0F, 0xAB, 0xEB, 0xF3, 0x32, 0xCC, 0xAA, 0xA4, 0x4E,
    0xF2, 0x0C, 0x44, 0x18, 0x04, 0xC3, 0x4A, 0x88, 0x10, 0x2E, 0xE2, 0x24, 0x3F, 0xC1, 0x35, 0xE8,
    0x5E, 0x87, 0x59, 0x1C, 0x96, 0x31, 0x00, 0xD4, 0xE5, 0x02, 0xF7, 0x0B, 0x1C, 0x5E, 0x03, 0xDB,
    0xAD, 0x2D, 0x74, 0x94, 0x2F, 0xD2, 0x18, 0x8D, 0x31, 0x7A, 0x26, 0x3B, 0x9E, 0x21, 0xEF, 0xCD,
    0xF9, 0x8F, 0xFD, 0x1F, 0xD0, 0x57, 0x67, 0xC1, 0xF0, 0xF3, 0xCF, 0x07, 0x3D, 0x94, 0x97, 0xE8,
    0x19, 0xE9, 0xE9, 0x57, 0xE1, 0xBC, 0x48, 0xF1, 0x33, 0x46, 0xBE, 0xC4, 0x93, 0x12, 0x57, 0xB3,
    0xAF, 0x6F, 0x70, 0x79, 0x7F, 0x58, 0x14, 0x65, 0x7E, 0x77, 0x52, 0xED, 0xA2, 0xED, 0x01, 0xE7,
    0x4E, 0x10, 0xBE, 0xC9, 0xD3, 0xF8, 0xF5, 0xA2, 0x0C, 0x99, 0x70, 0xD9, 0x22, 0x4D, 0xA1, 0x73,
    0xB9, 0x47, 0x3C, 0x36, 0x59, 0x64, 0x11, 0x69, 0x46, 0x51, 0x89, 0xC3, 0x1A, 0x53, 0x31, 0xBF,
    0xCB, 0x63, 0xEC, 0x55, 0xF9, 0xA2, 0x8C, 0x30, 0x79, 0xF4, 0x99, 0x06, 0x47, 0xF5, 0x9D, 0x8F,
    0xF2, 0x82, 0x00, 0x57, 0xC4, 0xA9, 0xCB, 0x1E, 0x77, 0x2C, 0x91, 0x1F, 0x57, 0x69, 0x92, 0xD5,
    0xFD, 0x38, 0xA9, 0xC2, 0x71, 0x8A, 0xFB, 0x19, 0xBE, 0xAB, 0xFB, 0xD0, 0x82, 0x51, 0x01, 0xE2,
    0xE1, 0xB2, 0x9F, 0x8F, 0x7F, 0xC1, 0x51, 0xDD, 0xAF, 0xE0, 0x35, 0x8C, 0x19, 0x16, 0x8B, 0x95,
    0x48, 0x04, 0xC9, 0xF7, 0x14, 0x22, 0x08, 0xAB, 0x2A, 0x99, 0x66, 0xDE, 0xC3, 0xD2, 0x37, 0xC3,
    0x48, 0xB2, 0xEE, 0xED, 0xE9, 0xE8, 0x0F, 0x8D, 0xEA, 0xA3, 0x25, 0x10, 0x64, 0x94, 0x2D, 0xE8,
    0x68, 0x16, 0x66, 0x19, 0x89, 0x94, 0x45, 0x56, 0xFB, 0x88, 0xD9, 0xF1, 0x07, 0xD0, 0x9B, 0x62,
    0x28, 0x95, 0x01, 0x4B, 0xAA, 0x76, 0x14, 0xA6, 0xD1, 0x22, 0x05, 0x18, 0xC1, 0x0A, 0x81, 0xA6,
    0xB8, 0xBC, 0x09, 0x53, 0x9D, 0x34, 0x74, 0xD0, 0xCE, 0x37, 0xBC, 0xEF, 0x8C, 0x92, 0x26, 0x86,
    0xF2, 0x1A, 0x25, 0xDC, 0x22, 0x61, 0x06, 0x3E, 0xDD, 0xD4, 0x85, 0xD8, 0x34, 0xE4, 0x33, 0x44,
    0x1F, 0x2F, 0x26, 0x13, 0x36, 0x78, 0x80, 0xE4, 0x24, 0xC9, 0xE2, 0x43, 0xE2, 0x93, 0xD3, 0x32,
    0x8F, 0xBE, 0x92, 0x3D, 0x5E, 0xB3, 0x10, 0x96, 0xC9, 0xE6, 0xDC, 0xC5, 0x40, 0x48, 0x3A, 0x36,
    0x60, 0xDE, 0x3F, 0x8B, 0xCA, 0xA4, 0xA8, 0x09, 0x51, 0x5C, 0x55, 0x79, 0xE9, 0x29, 0xA6, 0xBE,
    0x21, 0x99, 0xF9, 0x26, 0xC8, 0x2B, 0xF3, 0x05, 0xC0, 0x29, 0x03, 0x6F, 0x7A, 0x92, 0x57, 0x4F,
    0x36, 0x49, 0x96, 0x31, 0xAE, 0xEA, 0x24, 0xA3, 0x31, 0x29, 0x28, 0x94, 0xB8, 0x5E, 0x94, 0x99,
    0x92, 0x10, 0x9A, 0x97, 0x46, 0x90, 0x2E, 0x8A, 0x58, 0x04, 0x29, 0x23, 0xC4, 0x65, 0x4D, 0xB2,
    0x29, 0x98, 0x97, 0x0A, 0xC6, 0xA2, 0x85, 0xD1, 0x78, 0x1D, 0xD6, 0x21, 0x8F, 0x52, 0x15, 0x02,
    0x49, 0x56, 0x2C, 0x6A, 0x66, 0x34, 0xEA, 0xF5, 0x26, 0x3A, 0x56, 0xD4, 0xB8, 0x23, 0xD8, 0x77,
    0xC6, 0x95, 0x1B, 0x73, 0x29, 0xAE, 0x85, 0x9D, 0x4E, 0xC2, 0x3B, 0x1A, 0x0B, 0x17, 0x97, 0x8D,
    0x91, 0x45, 0x89, 0x01, 0xFC, 0x0D, 0x4E, 0x2B, 0xD6, 0x9B, 0x4C, 0x90, 0xE7, 0x72, 0x45, 0xA3,
    0xD1, 0x48, 0x4F, 0x1D, 0x52, 0x37, 0x4E, 0xF0, 0x7C, 0x96, 0x54, 0x90, 0x52, 0xD3, 0x34, 0xBF,
    0xAD, 0x90, 0x91, 0x3C, 0x90, 0x77, 0x0E, 0x58, 0xE8, 0x14, 0xB0, 0x98, 0x69, 0x7A, 0x12, 0xD1,
    0x96, 0x31, 0x12, 0x52, 0x9D, 0x9F, 0xFE, 0x14, 0xA6, 0x0B, 0x5C, 0x79, 0x9A, 0xC5, 0x74, 0xC3,
    0x32, 0x35, 0x41, 0x6F, 0x90, 0x1A, 0x5B, 0x92, 0x7C, 0xBB, 0x00, 0xC3, 0x4D, 0xC1, 0x00, 0xF5,
    0x4C, 0xD7, 0x6E, 0x3D, 0x53, 0x68, 0x70, 0xB9, 0x4A, 0x56, 0x9A, 0xF1, 0x7E, 0x2C, 0x62, 0x69,
    0xB9, 0x4F, 0x50, 0x0D, 0x09, 0x07, 0xDD, 0x50, 0x44, 0x51, 0x58, 0x4A, 0xE4, 0x11, 0x0F, 0x24,
    0x40, 0x7D, 0xB0, 0x07, 0x3F, 0xFB, 0x06, 0xCF, 0x20, 0xC5, 0xD9, 0xB4, 0x9E, 0x91, 0x8E, 0x4F,
    0x47, 0x68, 0xA8, 0x5B, 0x52, 0xA9, 0x18, 0xD4, 0x78, 0x5E, 0x10, 0x9B, 0x55, 0x17, 0xC9, 0x25,
    0xD0, 0xD1, 0x08, 0x90, 0x16, 0x2E, 0x95, 0xF0, 0x97, 0xD5, 0x8B, 0x0E, 0x34, 0x42, 0x33, 0x9C,
    0xC6, 0x82, 0x10, 0xE3, 0xA5, 0xFE, 0x2C, 0xB0, 0x4E, 0xFC, 0x04, 0x4F, 0x3B, 0x0A, 0x25, 0x6D,
    0x1B, 0x50, 0xF1, 0x10, 0x28, 0xE7, 0x50, 0xF7, 0xF2, 0x45, 0xDD, 0x28, 0x91, 0xF4, 0x52, 0x8A,
    0xC3, 0x92, 0x03, 0xAE, 0x21, 0xB1, 0xE7, 0x52, 0x58, 0xBA, 0x4D, 0x2B, 0x69, 0x90, 0x14, 0x8C,
    0x6B, 0xC1, 0xCE, 0xEB, 0xA1, 0xD1, 0x81, 0x2E, 0x58, 0x27, 0x93, 0x35, 0xFB, 0xAE, 0x49, 0x38,
    0x77, 0x08, 0x2B, 0x1D, 0x94, 0xFC, 0xEA, 0x91, 0xFF, 0x2C, 0xDB, 0xAA, 0xA6, 0x17, 0xE7, 0xF3,
    0xAF, 0x53, 0x3C, 0x27, 0x69, 0x48, 0xA5, 0xB0, 0xFF, 0x4A, 0xC9, 0x74, 0x2A, 0x00, 0x17, 0x15,
    0xC8, 0x30, 0x1D, 0x00, 0xA7, 0x0E, 0x81, 0x7D, 0xF9, 0x3A, 0xB9, 0xD1, 0x55, 0xE1, 0xEC, 0x8C,
    0x1A, 0xA2, 0xAC, 0x2C, 0xD1, 0xC9, 0x9C, 0xA8, 0x62, 0x21, 0xD2, 0x80, 0xD9, 0x5E, 0x84, 0x49,
    0xDA, 0x54, 0xD6, 0x12, 0xA0, 0x4D, 0x6E, 0x04, 0xB8, 0x0C, 0xDF, 0xA2, 0xC3, 0xB2, 0x0C, 0xEF,
    0x3D, 0xA3, 0xFE, 0x04, 0x93, 0x24, 0x4D, 0xBD, 0x41, 0x30, 0x20, 0xAC, 0xDC, 0xE8, 0x78, 0x77,
    0x6C, 0x2B, 0x46, 0xD7, 0x12, 0x21, 0x33, 0x2B, 0x97, 0x8A, 0xA1, 0xEE, 0xC8, 0x2E, 0xF1, 0x2D,
    0xD0, 0x5F, 0x85, 0x65, 0x25, 0x8D, 0x4B, 0x5E, 0x94, 0x6D, 0x9B, 0xEB, 0x5C, 0x2B, 0xDF, 0x13,
    0x98, 0x9B, 0x2A, 0x52, 0xE4, 0xED, 0x1D, 0x68, 0x91, 0xFC, 0xFA, 0x96, 0xCC, 0xB1, 0x15, 0x25,
    0x62, 0x56, 0xDA, 0xD4, 0x89, 0x9C, 0x2A, 0x6B, 0xAC, 0x3B, 0x78, 0x64, 0x75, 0x53, 0xA2, 0xA4,
    0xC5, 0xE4, 0x28, 0xC7, 0x93, 0x49, 0x12, 0x91, 0x79, 0x3D, 0xAF, 0xAA, 0x2D, 0x80, 0xAC, 0x7C,
    0xB4, 0x83, 0x2C, 0x0A, 0x36, 0xFB, 0x3A, 0x0E, 0xA3, 0x3A, 0x27, 0x70, 0x3B, 0xCD, 0x94, 0xC2,
    0xAA, 0x3E, 0x62, 0xD6, 0x3C, 0x3F, 0x6D, 0xA7, 0x16, 0xE3, 0x28, 0xBC, 0x97, 0xA4, 0x06, 0xC1,
    0x2B, 0xF2, 0x67, 0x95, 0x2E, 0x15, 0xEB, 0x41, 0x9E, 0x51, 0x1B, 0x14, 0x74, 0xEA, 0x41, 0x67,
    0x8A, 0xF8, 0xA6, 0x26, 0x49, 0x4F, 0x9F, 0xE6, 0x40, 0xDB, 0x5A, 0x0F, 0x71, 0xCB, 0x07, 0x61,
    0x1C, 0xD3, 0xD9, 0xCB, 0xDB, 0xA4, 0xAA, 0x71, 0x06, 0xB8, 0x1B, 0x51, 0x9A, 0x44, 0x64, 0x85,
    0x21, 0x73, 0xE9, 0x8A, 0xFC, 0x69, 0x8C, 0x03, 0x9E, 0x21, 0x27, 0x21, 0x94, 0x76, 0xF1, 0x5E,
    0x84, 0x90, 0xAF, 0x98, 0x50, 0x8D, 0xF2, 0x50, 0x15, 0xF5, 0xEC, 0xC8, 0xA7, 0x97, 0x69, 0x52,
    0x9C, 0x86, 0xF5, 0xCC, 0x8B, 0xC7, 0xBE, 0x58, 0x4E, 0xF9, 0x08, 0x26, 0xC3, 0x75, 0x02, 0x55,
    0x9F, 0x38, 0x59, 0xCD, 0x96, 0x08, 0x28, 0x2E, 0x23, 0x96, 0x97, 0x4E, 0x00, 0x29, 0x98, 0xA4,
    0x39, 0x4C, 0x44, 0x01, 0x17, 0x26, 0xC7, 0xFD, 0x21, 0x99, 0x31, 0x6F, 0x09, 0x22, 0xC0, 0x53,
    0x06, 0x95, 0x8E, 0x79, 0x80, 0x28, 0x9C, 0xD2, 0xD6, 0xA4, 0x4B, 0x7A, 0x85, 0x86, 0xCD, 0x04,
    0xF6, 0xD1, 0x2A, 0xF4, 0x06, 0x64, 0x47, 0x19, 0x6D, 0x32, 0x7B, 0x95, 0x64, 0x50, 0xD4, 0xBC,
    0xE7, 0x0F, 0x1A, 0x95, 0xE5, 0xC7, 0x68, 0x00, 0x3C, 0xAE, 0x14, 0x25, 0x17, 0x61, 0x80, 0x9A,
    0x51, 0x9C, 0x0A, 0xE4, 0x66, 0xEF, 0x22, 0x2C, 0xB5, 0x81, 0xE8, 0x4C, 0x80, 0x81, 0x2A, 0x74,
    0xFF, 0x9C, 0xC4, 0xF5, 0xCC, 0xE7, 0x2F, 0xDF, 0xE0, 0x64, 0x3A, 0x63, 0xB9, 0x18, 0x90, 0x9D,
    0x09, 0xB0, 0xBD, 0x28, 0xD7, 0xE7, 0xBA, 0x2B, 0x0A, 0x4B, 0x9C, 0x47, 0x0B, 0xF2, 0xC8, 0x57,
    0x17, 0xBC, 0xC3, 0xDB, 0x88, 0x93, 0x9B, 0x8D, 0xC6, 0x00, 0xAE, 0xEA, 0xFB, 0x14, 0x07, 0x45,
    0xCE, 0x96, 0xD1, 0x40, 0x01, 0x96, 0xEC, 0x29, 0x94, 0xE6, 0x1B, 0xBC, 0xD1, 0x0E, 0x7E, 0x4B,
    0x14, 0x01, 0xD8, 0xAB, 0xE7, 0x0F, 0x9A, 0x66, 0xCB, 0xE2, 0xEE, 0xAA, 0x1D, 0x67, 0x46, 0xF5,
    0x15, 0x48, 0xCA, 0x02, 0xAB, 0xB1, 0x6C, 0x2B, 0x8C, 0x6C, 0xBB, 0xC8, 0x81, 0x52, 0xD2, 0xE1,
    0x58, 0x14, 0x18, 0x3A, 0x66, 0x49, 0x1A, 0x1B, 0x19, 0xD2, 0x59, 0xED, 0xA8, 0x2E, 0xD7, 0xBB,
    0xAA, 0xB8, 0x3E, 0xBD, 0x5B, 0x65, 0xAC, 0xAA, 0x61, 0xA9, 0x36, 0x37, 0x7C, 0xB9, 0x37, 0xE3,
    0x6B, 0x3B, 0x37, 0xBE, 0xDA, 0x81, 0x61, 0xFB, 0x0B, 0x6D, 0xA1, 0x90, 0x2D, 0xE6, 0x54, 0x6A,
    0x73, 0x1C, 0x73, 0x3E, 0x68, 0x4B, 0x63, 0x64, 0xCC, 0x2C, 0x28, 0x79, 0x88, 0x61, 0xC0, 0x63,
    0x65, 0x36, 0x98, 0x94, 0xF9, 0xDC, 0x63, 0x15, 0x57, 0xD0, 0xEC, 0x05, 0xD7, 0xF8, 0xBE, 0xF2,
    0x7A, 0xBD, 0x60, 0x1E, 0x16, 0x9E, 0x97, 0xE8, 0xC9, 0xCD, 0xA1, 0xD4, 0x31, 0x0E, 0x5B, 0xFC,
    0xC6, 0x89, 0xE8, 0x50, 0xBC, 0xA9, 0x21, 0x58, 0xC3, 0x71, 0x95, 0xA7, 0x8B, 0x1A, 0x6F, 0xB4,
    0x42, 0x47, 0x2C, 0x6E, 0x94, 0x11, 0xDB, 0x20, 0x69, 0xC1, 0x3D, 0x4C, 0x93, 0x29, 0x1B, 0x05,
    0xC4, 0x8D, 0xED, 0x54, 0x85, 0xA3, 0x58, 0x3C, 0x8B, 0x37, 0x12, 0xCB, 0x2E, 0x0A, 0x25, 0x4C,
    0xB2, 0x05, 0x1B, 0xA2, 0x57, 0xFD, 0xE7, 0x0F, 0xCA, 0x15, 0x90, 0x63, 0x93, 0xA5, 0x40, 0x52,
    0x21, 0x2A, 0x70, 0x45, 0xBA, 0x32, 0x3C, 0x26, 0x33, 0x39, 0x50, 0x33, 0xA2, 0xEE, 0x40, 0x8F,
    0xC8, 0xBD, 0x35, 0xC9, 0x52, 0xB9, 0xEC, 0x67, 0x3E, 0x9C, 0x89, 0x1A, 0x5C, 0xA6, 0xED, 0x40,
    0xE4, 0x5C, 0x2B, 0xD5, 0x9C, 0xE7, 0x85, 0x09, 0x39, 0x0C, 0x5E, 0xA0, 0x4F, 0xB5, 0x70, 0x75,
    0xD0, 0x98, 0xAE, 0x26, 0x9E, 0x83, 0xE1, 0x32, 0x62, 0x2A, 0xD9, 0x1A, 0xF6, 0x95, 0x14, 0xFD,
    0xB5, 0x24, 0xB8, 0x5E, 0xBA, 0x51, 0x00, 0x4B, 0x6A, 0xBC, 0x92, 0x02, 0x05, 0x3B, 0x2B, 0xC2,
    0x28, 0xC9, 0x60, 0xDE, 0x6F, 0x88, 0xB4, 0x25, 0x47, 0x9A, 0xEB, 0xEB, 0x0A, 0x22, 0xA3, 0xFC,
    0x3A, 0x8C, 0x66, 0x9E, 0x88, 0x63, 0x1F, 0x19, 0x83, 0xC5, 0x82, 0x77, 0x13, 0x2A, 0xE9, 0xB0,
    0xD3, 0x69, 0x4B, 0xBC, 0xE6, 0x05, 0x43, 0xF1, 0x74, 0x59, 0x37, 0x09, 0xBF, 0x4F, 0x95, 0xD5,
    0x2D, 0x32, 0xCB, 0x9E, 0x13, 0x6B, 0x96, 0x68, 0x32, 0xBA, 0x7C, 0x65, 0x2A, 0x5F, 0x37, 0x00,
    0x7F, 0xD1, 0x3B, 0x80, 0x8F, 0xAF, 0xF1, 0x50, 0x45, 0x76, 0x6D, 0xA0, 0x41, 0xF8, 0x00, 0x74,
    0x9B, 0xEF, 0x3D, 0xD3, 0xF9, 0x8A, 0x48, 0x0F, 0x5E, 0x3C, 0xE6, 0x3D, 0x11, 0xB1, 0x44, 0xB1,
    0x75, 0xC1, 0xFA, 0x99, 0x0B, 0x23, 0x64, 0xF2, 0x8C, 0x28, 0x91, 0xF8, 0x6B, 0x19, 0x99, 0x71,
    0xA2, 0x48, 0x9A, 0x61, 0xF2, 0xD8, 0x10, 0x69, 0x0D, 0x0F, 0x21, 0x57, 0x73, 0xAA, 0x11, 0x55,
    0x33, 0xAF, 0xEB, 0x7C, 0xCE, 0x10, 0x94, 0xEC, 0x2B, 0x51, 0x68, 0xBE, 0x6B, 0x0F, 0x27, 0x97,
    0xAD, 0x8A, 0x24, 0x15, 0x45, 0x4F, 0x12, 0x41, 0x4B, 0xBB, 0x22, 0xAB, 0x15, 0x19, 0x2D, 0xC8,
    0x1D, 0xF7, 0x1C, 0xC5, 0x57, 0x08, 0xBD, 0x94, 0xB6, 0x55, 0x4E, 0x25, 0xBA, 0xB9, 0xE7, 0x2A,
    0x15, 0xE1, 0x8C, 0x5C, 0x4D, 0x94, 0xF4, 0x9A, 0xAE, 0xAA, 0x4C, 0x2B, 0xF9, 0xF6, 0xC4, 0x26,
    0x04, 0x67, 0x99, 0x64, 0x50, 0xC3, 0xC2, 0x54, 0xCC, 0xD4, 0xC5, 0xA6, 0xA8, 0x78, 0x17, 0x65,
    0xBB, 0x69, 0xFA, 0x6E, 0x6E, 0x52, 0x87, 0x65, 0x5B, 0xED, 0xD6, 0x55, 0xB1, 0xEA, 0xB7, 0x15,
    0x6E, 0x8A, 0xD6, 0xDF, 0xAE, 0xDE, 0x8C, 0x86, 0x0E, 0x04, 0x2D, 0xDD, 0x6B, 0xF7, 0xD6, 0x96,
    0x09, 0x1F, 0x49, 0xFB, 0xD8, 0x16, 0x5B, 0x81, 0xF4, 0x33, 0x1E, 0x5F, 0x27, 0xF5, 0x51, 0x17,
    0x54, 0x16, 0xBB, 0x1C, 0x5D, 0x06, 0x76, 0xB7, 0xD2, 0x09, 0x48, 0x32, 0x79, 0x18, 0xE3, 0xDE,
    0x30, 0xFC, 0xCA, 0x2A, 0x23, 0xA3, 0xF4, 0x8C, 0x08, 0x4E, 0x86, 0x1F, 0xD9, 0x8E, 0x0A, 0xCB,
    0xBE, 0x68, 0xF7, 0xEA, 0x1C, 0xB1, 0xD1, 0xEC, 0xC3, 0xE2, 0x44, 0xB4, 0x06, 0xBF, 0xE4, 0x49,
    0xE6, 0x91, 0xAF, 0x67, 0xBD, 0x65, 0xEF, 0xCA, 0xB4, 0xB5, 0x99, 0x61, 0xA0, 0xA1, 0xBD, 0x06,
    0xB1, 0xCE, 0x86, 0xF9, 0x39, 0xD5, 0xC6, 0x98, 0x9E, 0xBB, 0x68, 0x6E, 0x6A, 0x12, 0xF6, 0x58,
    0x87, 0xA2, 0x66, 0xF0, 0x6F, 0xE6, 0xE1, 0x14, 0xB4, 0x36, 0xAD, 0xB0, 0x02, 0x55, 0x95, 0x3C,
    0x31, 0xEA, 0xD6, 0xF1, 0x4A, 0xF1, 0x44, 0x64, 0x35, 0x4F, 0xC8, 0x67, 0x4C, 0x3E, 0x7A, 0x3C,
    0xC3, 0xD1, 0xD1, 0xEB, 0x76, 0xDB, 0xD5, 0xD3, 0xDC, 0x81, 0xEF, 0x10, 0x13, 0xCC, 0x8A, 0x4F,
    0x1F, 0x14, 0x44, 0xB1, 0x7F, 0x33, 0x24, 0xBA, 0x3A, 0xD7, 0x2A, 0x55, 0xDD, 0x90, 0x9E, 0x22,
    0x22, 0xD6, 0xF9, 0x57, 0x35, 0xAD, 0x93, 0xA6, 0xB4, 0x06, 0x42, 0xF3, 0x24, 0xCA, 0xDD, 0x46,
    0x10, 0xA6, 0x76, 0xEA, 0x97, 0xDA, 0x06, 0x7C, 0x4C, 0x01, 0xB3, 0x16, 0xBA, 0xC6, 0x92, 0xD0,
    0xFA, 0xFA, 0xFD, 0xFE, 0xEB, 0xDA, 0xFF, 0xB2, 0x18, 0x31, 0xE0, 0x47, 0xEE, 0x44, 0xBC, 0xDF,
    0xAA, 0xF2, 0x44, 0xA3, 0xFD, 0x9F, 0x2D, 0x00, 0xEF, 0x3B, 0x8B, 0xBB, 0x02, 0xC9, 0x91, 0x44,
    0xB8, 0x70, 0x43, 0x3C, 0x7F, 0x30, 0x07, 0xD9, 0xF2, 0xDF, 0x2C, 0x04, 0x4F, 0xE4, 0xC7, 0xAE,
    0x1E, 0x79, 0xA7, 0xAC, 0xFD, 0x5E, 0x52, 0xEF, 0x1A, 0xDF, 0x51, 0x45, 0xBA, 0xBA, 0xEE, 0x11,
    0xC9, 0x5B, 0x7E, 0x79, 0x79, 0x54, 0x06, 0x57, 0x09, 0x5B, 0x3B, 0x2D, 0xC5, 0x76, 0xF9, 0xFE,
    0xA9, 0xE5, 0x48, 0xF7, 0x64, 0x4D, 0x25, 0x7A, 0xB2, 0x74, 0x4D, 0xA9, 0xFD, 0xBD, 0x6C, 0x4D,
    0x49, 0xE8, 0x30, 0xB4, 0xA1, 0x69, 0x73, 0x0E, 0x76, 0xE7, 0x41, 0xA3, 0x0D, 0x1B, 0xD4, 0xDA,
    0xF1, 0x53, 0x26, 0xB7, 0x01, 0x1F, 0xB3, 0x89, 0x47, 0x11, 0x3A, 0x16, 0x0C, 0x0A, 0x6B, 0x6D,
    0xF7, 0x6D, 0xF4, 0xFF, 0xFC, 0xFD, 0x8F, 0x0D, 0xA7, 0x38, 0x30, 0xD8, 0x77, 0xAF, 0x0D, 0xAD,
    0xA5, 0xC1, 0x16, 0xC7, 0x4C, 0x23, 0xB4, 0xC9, 0xCD, 0x22, 0x0A, 0xFC, 0x51, 0x59, 0x9D, 0x62,
    0xD8, 0xD9, 0x40, 0x45, 0x7D, 0x1B, 0x86, 0x9B, 0xD5, 0x05, 0x0F, 0x27, 0x8D, 0xBF, 0xC3, 0xFC,
    0x9B, 0x8D, 0x04, 0x73, 0xCF, 0xEE, 0x9F, 0xB6, 0x91, 0xBE, 0x73, 0xDA, 0xAE, 0xB5, 0x4A, 0x71,
    0x8F, 0xB4, 0x94, 0xCA, 0xB4, 0x52, 0xBF, 0xEE, 0x96, 0x82, 0x1F, 0x2B, 0xEA, 0x1A, 0xF3, 0x1C,
    0xC9, 0x98, 0xF4, 0x44, 0x1B, 0x7C, 0x36, 0x08, 0x6B, 0x38, 0x10, 0x24, 0xB7, 0x1E, 0x44, 0x8A,
    0x4B, 0x60, 0x24, 0x57, 0x00, 0x6A, 0xE5, 0x39, 0xF8, 0x88, 0x2C, 0x20, 0xE9, 0x07, 0x43, 0xFB,
    0x9B, 0xC4, 0xE9, 0x9D, 0xF3, 0x61, 0xF1, 0x18, 0x12, 0xCD, 0x31, 0x61, 0x23, 0x99, 0x41, 0xAD,
    0xB0, 0xB8, 0xD0, 0xAF, 0x8E, 0xFA, 0xB8, 0x60, 0xA4, 0x0E, 0xDA, 0x84, 0x51, 0x4A, 0x5A, 0x10,
    0xC2, 0x0E, 0x16, 0x25, 0xF6, 0xC9, 0xD1, 0x45, 0x1E, 0x34, 0xDA, 0x8D, 0xA2, 0xD8, 0x36, 0xD3,
    0x3F, 0xCF, 0xAE, 0xAF, 0x06, 0xCC, 0x46, 0x5D, 0x92, 0xBE, 0x3C, 0x7F, 0xE1, 0x23, 0xF2, 0xA9,
    0x98, 0x3F, 0xAA, 0xB3, 0x05, 0xE4, 0x4D, 0x9D, 0x0E, 0x68, 0xDD, 0x59, 0x53, 0xF5, 0x62, 0xF5,
    0x86, 0xD4, 0x2C, 0x2F, 0xF0, 0x04, 0x8E, 0x51, 0xDC, 0xC3, 0x71, 0x42, 0x38, 0x97, 0x1B, 0x87,
    0xF7, 0x48, 0x2B, 0xAA, 0xB7, 0xF0, 0x89, 0x1A, 0xDD, 0xE6, 0xE5, 0x35, 0x39, 0xDF, 0x45, 0xBF,
    0xCB, 0xA2, 0x82, 0x38, 0x53, 0xA2, 0xC3, 0x78, 0x4A, 0x52, 0x72, 0xE8, 0x0C, 0x60, 0x31, 0x5A,
    0xC0, 0xA8, 0x0C, 0x69, 0x30, 0x21, 0x48, 0xF9, 0x0A, 0x4A, 0x9D, 0xB1, 0x68, 0x9F, 0xD4, 0x08,
    0x60, 0x61, 0x13, 0x69, 0x08, 0x90, 0x5B, 0x0F, 0x1A, 0xD1, 0xCC, 0x0E, 0x41, 0x39, 0x58, 0x51,
    0xCB, 0x9E, 0x9A, 0xC4, 0x6B, 0xDC, 0x54, 0x53, 0x64, 0x5A, 0x77, 0xA0, 0xC4, 0xA3, 0x09, 0xEB,
    0x6E, 0x3C, 0xAD, 0xC2, 0x58, 0xAA, 0x93, 0x19, 0x15, 0x54, 0xBE, 0x13, 0x38, 0x86, 0x00, 0x2B,
    0x5E, 0xEF, 0x19, 0x26, 0xA7, 0x08, 0x9E, 0xF9, 0xE8, 0x19, 0x15, 0x79, 0x08, 0x4F, 0x4A, 0xCB,
    0xC1, 0x25, 0xD9, 0x28, 0x1F, 0x6C, 0xEF, 0xF8, 0x68, 0xA0, 0x04, 0x5D, 0x81, 0xBE, 0x6D, 0xA0,
    0x0F, 0x2D, 0x74, 0x41, 0x80, 0x58, 0x2B, 0x27, 0x79, 0x38, 0x9F, 0x7A, 0x26, 0x33, 0xF2, 0x31,
    0x5F, 0x0F, 0x4E, 0x6B, 0x44, 0xA1, 0x91, 0xFA, 0x02, 0xF5, 0xA5, 0x91, 0x66, 0x77, 0xB5, 0xF0,
    0x13, 0x04, 0x54, 0xD8, 0x6A, 0x9E, 0x27, 0x01, 0xE2, 0xBA, 0x5E, 0x32, 0x14, 0x58, 0xAC, 0x3A,
    0xCB, 0xDC, 0x64, 0x78, 0xBE, 0x3D, 0x3F, 0x71, 0xCE, 0x2B, 0x0B, 0xAA, 0x38, 0x42, 0xDE, 0x3C,
    0x6F, 0xE6, 0xEC, 0xAD, 0xD4, 0xAC, 0x0A, 0x4F, 0x2B, 0x25, 0x55, 0x18, 0xD6, 0x12, 0xB2, 0x4A,
    0xBF, 0x1A, 0xD0, 0xCA, 0x4A, 0xB2, 0x4D, 0xDA, 0xC9, 0xD4, 0xCC, 0x3C, 0x88, 0x37, 0x22, 0x07,
    0x60, 0xCC, 0x9C, 0x26, 0x09, 0x77, 0x99, 0x98, 0xB8, 0xAA, 0x29, 0x7F, 0x50, 0x4E, 0xEE, 0x48,
    0x24, 0xCD, 0x6A, 0x24, 0x76, 0xE3, 0x2B, 0x70, 0xA0, 0xAA, 0x1D, 0x27, 0x77, 0x38, 0xF6, 0x86,
    0xBD, 0x15, 0x66, 0xB9, 0x85, 0x73, 0xD7, 0xF9, 0x6D, 0x50, 0xE2, 0x5F, 0x17, 0x70, 0x78, 0xF9,
    0x30, 0x4B, 0xE6, 0xF4, 0xDC, 0xE0, 0x71, 0x19, 0xCE, 0x31, 0x9B, 0x8B, 0xAE, 0xCE, 0xC2, 0x3D,
    0x3B, 0x69, 0xAF, 0x39, 0xF7, 0x6A, 0xA6, 0x6D, 0xF7, 0x30, 0xB1, 0x99, 0xB3, 0x49, 0x5D, 0x18,
    0xE3, 0xF2, 0xFB, 0x09, 0x3F, 0xAA, 0xC4, 0x8E, 0xC1, 0x6B, 0xE4, 0x00, 0xDC, 0x3A, 0x1C, 0x1B,
    0xD1, 0xF3, 0x2C, 0xF0, 0xB3, 0xEF, 0x20, 0x43, 0xAB, 0x73, 0x32, 0xD6, 0x3C, 0x90, 0x1A, 0x5D,
    0x12, 0x6C, 0xF7, 0xDB, 0xAC, 0x80, 0x22, 0x2A, 0x9B, 0x02, 0x04, 0x70, 0x22, 0xF8, 0x48, 0x75,
    0x7A, 0x91, 0x30, 0xAC, 0x21, 0x54, 0x45, 0x85, 0x82, 0x9F, 0x7D, 0x9D, 0x92, 0x3C, 0xB0, 0x5B,
    0xD9, 0x62, 0xA9, 0x10, 0xA4, 0x85, 0x1D, 0xE6, 0xC2, 0x9E, 0x86, 0x77, 0x51, 0xC1, 0xF1, 0xD6,
    0x03, 0x5B, 0x72, 0x03, 0xBD, 0x5D, 0xBB, 0x16, 0x82, 0x9D, 0x0E, 0x8A, 0xAA, 0x82, 0x6D, 0x10,
    0x6E, 0x3A, 0x28, 0xD5, 0x7A, 0xA0, 0x1F, 0x9C, 0xC2, 0xCF, 0xF0, 0xBF, 0xE1, 0x93, 0x0B, 0x45,
    0xF4, 0x62, 0xFB, 0xC5, 0x4B, 0x1F, 0xBD, 0x18, 0x6E, 0xFB, 0x3C, 0x9F, 0x6E, 0x0F, 0xE0, 0x8E,
    0x0A, 0xDA, 0x19, 0xBC, 0x82, 0xE6, 0x2F, 0x86, 0xAF, 0x48, 0xFB, 0xCB, 0xCF, 0xBE, 0xD8, 0xB9,
    0x84, 0x78, 0x8D, 0x17, 0x11, 0x04, 0x68, 0x08, 0xDB, 0x76, 0x34, 0x48, 0x3D, 0x29, 0xAF, 0xD2,
    0x70, 0x0C, 0xAB, 0x7F, 0x93, 0xDD, 0xBE, 0xEA, 0x0C, 0x9D, 0xCE, 0x2F, 0xD1, 0x18, 0x12, 0xEC,
    0xCA, 0x90, 0x7E, 0x7B, 0x7A, 0xAC, 0x1F, 0xD4, 0x23, 0xCA, 0xE8, 0xEF, 0x3E, 0x32, 0x4E, 0xDF,
    0x59, 0xC1, 0x4E, 0xB4, 0x24, 0xD0, 0x0D, 0x81, 0x3E, 0x89, 0x7E, 0xA0, 0xAB, 0xBB, 0x61, 0x30,
    0x80, 0x69, 0x99, 0xB7, 0x03, 0x3F, 0x9B, 0x36, 0x2D, 0x03, 0x21, 0x22, 0x74, 0xDE, 0x26, 0x73,
    0x73, 0xEA, 0x67, 0xCB, 0x83, 0xFA, 0x24, 0xAA, 0xB6, 0xE4, 0x27, 0x55, 0x15, 0x90, 0xA4, 0xC6,
    0xF4, 0x05, 0x91, 0x3D, 0x78, 0xDD, 0x1F, 0x21, 0xED, 0xD5, 0x8C, 0x47, 0xC5, 0xF6, 0x36, 0xA3,
    0xE3, 0xE3, 0xC5, 0x0E, 0xFA, 0x14, 0x7E, 0x76, 0x5E, 0xA2, 0x4D, 0xC6, 0x3E, 0xCA, 0x2B, 0xCF,
    0x83, 0x33, 0x0D, 0xE2, 0xFD, 0xF4, 0x0D, 0x3C, 0xD1, 0x29, 0xA6, 0x25, 0x91, 0x1E, 0x66, 0x44,
    0x8E, 0x59, 0x66, 0x0C, 0x38, 0x39, 0x83, 0x64, 0xD9, 0xD6, 0x0E, 0x69, 0x06, 0x4E, 0xF9, 0x30,
    0x93, 0xAD, 0xCD, 0xAE, 0x04, 0x81, 0x89, 0x04, 0x17, 0x21, 0x4C, 0x09, 0x05, 0x0D, 0x21, 0xA9,
    0xA7, 0x4B, 0xAE, 0x13, 0x36, 0x3E, 0x84, 0x1D, 0xC6, 0x61, 0x51, 0xF3, 0xAC, 0x59, 0xA1, 0x4F,
    0xA4, 0x93, 0x4A, 0x34, 0xA1, 0x6E, 0xA2, 0xC0, 0x8A, 0xB5, 0x07, 0x16, 0xDB, 0x84, 0xC7, 0x9E,
    0xE3, 0x4F, 0xC5, 0x41, 0xC6, 0x45, 0x50, 0x2C, 0xAA, 0x99, 0x07, 0xC0, 0x4D, 0x53, 0x64, 0x09,
    0xE5, 0x44, 0x27, 0x1C, 0x72, 0x84, 0x6C, 0xCC, 0x02, 0xD9, 0x63, 0x2C, 0x56, 0xCD, 0x93, 0xE5,
    0x19, 0x52, 0x9F, 0x3C, 0xAE, 0x0A, 0xDF, 0xF6, 0xCD, 0x0D, 0x22, 0x8C, 0x16, 0xC5, 0x8A, 0x26,
    0x53, 0x81, 0x11, 0xD1, 0x17, 0x17, 0x12, 0x80, 0xE7, 0x3C, 0x74, 0x30, 0xB2, 0xB9, 0xF3, 0x1E,
    0x29, 0xAF, 0x49, 0xB7, 0x9A, 0x25, 0x93, 0xDA, 0x93, 0x96, 0xB1, 0xC3, 0xF9, 0x90, 0x26, 0x58,
    0xF2, 0xBB, 0x6F, 0x29, 0x41, 0x1A, 0xDD, 0x70, 0xA6, 0x48, 0xE7, 0x14, 0x49, 0x6F, 0xA4, 0x8A,
    0x41, 0xD1, 0xB2, 0x3A, 0x14, 0x1F, 0xA8, 0x2E, 0x40, 0x6F, 0x8F, 0x3C, 0xEC, 0xB7, 0x28, 0x40,
    0x3A, 0x81, 0x61, 0x63, 0x2A, 0x50, 0x7F, 0x9C, 0x11, 0x01, 0xF4, 0x2C, 0x3A, 0x17, 0x19, 0x24,
    0xEA, 0x4D, 0xA5, 0xFB, 0x85, 0x6D, 0x3C, 0x32, 0xAC, 0xE1, 0xDF, 0xEC, 0xDC, 0xCE, 0xDA, 0xD0,
    0x44, 0x55, 0xB5, 0xA2, 0x57, 0x71, 0x64, 0xEE, 0x61, 0xAC, 0x5B, 0xA3, 0xCC, 0x0E, 0x30, 0x36,
    0xCB, 0xFF, 0xFE, 0x46, 0xC4, 0xD8, 0x61, 0x16, 0x1F, 0xD3, 0x90, 0xD3, 0x4B, 0x88, 0xCF, 0x8A,
    0xE2, 0x71, 0x65, 0x87, 0x9E, 0x34, 0xAC, 0x2A, 0xF0, 0x7C, 0x28, 0xBD, 0x61, 0x5F, 0x8D, 0xA1,
    0x28, 0xF0, 0x10, 0x46, 0x91, 0x9E, 0xBB, 0xE0, 0x04, 0x35, 0xBF, 0x22, 0xA6, 0xC2, 0xA8, 0xF5,
    0xC8, 0xB4, 0xB0, 0xCC, 0xBE, 0x9D, 0x35, 0xC8, 0xE4, 0xFB, 0x4A, 0x70, 0xCA, 0xA6, 0x8A, 0xD3,
    0xBC, 0xC8, 0x33, 0x82, 0x49, 0x9C, 0x6B, 0x5E, 0x2C, 0x82, 0x0D, 0xC4, 0x6A, 0x17, 0xF6, 0x38,
    0xB9, 0x42, 0xCB, 0x2B, 0x7B, 0xC2, 0xCB, 0x3B, 0x48, 0x0C, 0xBF, 0x7A, 0x39, 0xD0, 0x0E, 0xE6,
    0x76, 0x38, 0x8D, 0xBD, 0xAD, 0xFB, 0xA6, 0xDB, 0x59, 0xF0, 0xD6, 0xEA, 0xF3, 0xD9, 0x67, 0x7E,
    0x2B, 0xAB, 0xDE, 0xDA, 0xF3, 0xE3, 0xF2, 0xD8, 0xFF, 0x5A, 0xAB, 0x3A, 0xF7, 0x09, 0x94, 0x65,
    0x95, 0x0F, 0x63, 0x7B, 0x38, 0xD8, 0xEF, 0xA3, 0x8B, 0xE7, 0x0F, 0xAD, 0x9C, 0xC4, 0xE7, 0x55,
    0xF8, 0xBA, 0x7A, 0xE9, 0x53, 0xD7, 0x4B, 0x51, 0x77, 0x91, 0x81, 0x28, 0xDB, 0x75, 0x94, 0xAB,
    0xD6, 0xC4, 0xC0, 0xEE, 0x4A, 0xC1, 0x6F, 0xCB, 0xD4, 0x2B, 0xB3, 0x2E, 0x4B, 0xF1, 0xD8, 0x1C,
    0xB2, 0x70, 0xE6, 0x37, 0x19, 0x51, 0xFF, 0x00, 0x4D, 0xC9, 0xF1, 0x73, 0x70, 0x42, 0x6C, 0x27,
    0x49, 0xF6, 0x52, 0x59, 0xA5, 0x52, 0x34, 0x7F, 0x0F, 0x44, 0x46, 0x46, 0x8A, 0x36, 0x26, 0x5E,
    0x59, 0x72, 0x69, 0x1F, 0x81, 0x67, 0x7F, 0x6C, 0xBC, 0x90, 0xFF, 0x92, 0x6B, 0x86, 0x11, 0xAC,
    0x05, 0x14, 0xC1, 0xB6, 0x91, 0xEB, 0x94, 0x86, 0xEE, 0x17, 0xDF, 0xEC, 0x22, 0x61, 0x5C, 0x0F,
    0x30, 0xEF, 0x46, 0xAE, 0xA8, 0x0A, 0x0F, 0xF6, 0xF5, 0x53, 0x8D, 0x9B, 0x31, 0xEE, 0xD1, 0xF9,
    0x29, 0xBF, 0xDA, 0xA6, 0xC6, 0xB6, 0xC1, 0xB2, 0xF3, 0x78, 0x96, 0x84, 0xA8, 0xCF, 0x9F, 0x3F,
    0xE8, 0x92, 0x2E, 0xF9, 0x4B, 0x75, 0xD5, 0xEB, 0x74, 0x07, 0xA2, 0xEB, 0x6D, 0x1A, 0xAE, 0xC7,
    0x6B, 0x1C, 0x91, 0xAD, 0x1C, 0x72, 0xD7, 0x7A, 0x4E, 0x7C, 0x35, 0xFC, 0x7C, 0x30, 0xA0, 0xA1,
    0xDB, 0xDF, 0x1E, 0xBC, 0x1E, 0xDB, 0xF1, 0x10, 0xD6, 0x35, 0x0B, 0x18, 0x31, 0x21, 0x29, 0xF2,
    0x5B, 0x6F, 0x08, 0x54, 0x7D, 0x02, 0x4F, 0x2F, 0xCF, 0x2A, 0x0E, 0x0A, 0x8D, 0x5E, 0xC0, 0x20,
    0x97, 0x75, 0xCE, 0x38, 0x07, 0x7E, 0xCD, 0xB6, 0xC3, 0x6D, 0x0D, 0xC9, 0x45, 0xB2, 0xF6, 0xC5,
    0x04, 0xD3, 0xB8, 0xA0, 0xAB, 0x58, 0xF4, 0x56, 0x8E, 0xEF, 0xDB, 0x04, 0x1C, 0x22, 0x59, 0x50,
    0x6B, 0x37, 0xB2, 0x5E, 0xAA, 0xD1, 0xD8, 0xBE, 0x36, 0xD3, 0x2D, 0xAC, 0xAD, 0xCB, 0x9E, 0x66,
    0xDD, 0x05, 0xCE, 0x39, 0xE5, 0x57, 0x50, 0xC2, 0x28, 0x82, 0x5D, 0x60, 0x12, 0x29, 0x75, 0x6E,
    0xA6, 0x79, 0x9B, 0x55, 0x2E, 0x0B, 0x5C, 0x0C, 0x15, 0x0E, 0x72, 0x2D, 0x1A, 0x75, 0xAC, 0x7C,
    0xCA, 0x9A, 0xDA, 0x90, 0x5A, 0xB3, 0x0E, 0x74, 0xD9, 0xAD, 0x59, 0x0D, 0x9A, 0x43, 0xF2, 0x82,
    0x4C, 0x11, 0x46, 0xCD, 0xAE, 0xDF, 0x5B, 0xB1, 0x8A, 0x74, 0xB8, 0xB2, 0xB5, 0xA4, 0x43, 0x5C,
    0x72, 0x5F, 0x25, 0x01, 0x28, 0xD3, 0x4E, 0xF8, 0x1D, 0xD6, 0x94, 0x06, 0x7D, 0x91, 0xCB, 0xC4,
    0x30, 0x18, 0x2F, 0xA6, 0x27, 0xF4, 0x86, 0x37, 0xBB, 0xC1, 0x63, 0xDC, 0xF4, 0xA7, 0xB1, 0x1A,
    0x04, 0x41, 0x58, 0x4E, 0x2B, 0x2A, 0xB9, 0xD0, 0x5B, 0xA2, 0x19, 0xFA, 0xA8, 0x8D, 0x39, 0x85,
    0xB5, 0xD7, 0x72, 0x1B, 0x12, 0xC2, 0xEC, 0xAB, 0xB0, 0xC2, 0x6F, 0x01, 0x14, 0xFE, 0x5F, 0x01,
    0xF7, 0xD6, 0x8A, 0x95, 0xEA, 0x4F, 0xE9, 0x40, 0xCF, 0x96, 0x7A, 0xBB, 0x73, 0xD7, 0x90, 0x4D,
    0xBB, 0xF2, 0x26, 0x35, 0x83, 0xD9, 0x10, 0xF2, 0x82, 0xBE, 0x79, 0xBF, 0x3D, 0x20, 0x14, 0xFF,
    0x6F, 0x2B, 0x6C, 0xF2, 0xCF, 0x5F, 0x6E, 0x2B, 0x43, 0x1C, 0x65, 0x43, 0x00, 0x00};